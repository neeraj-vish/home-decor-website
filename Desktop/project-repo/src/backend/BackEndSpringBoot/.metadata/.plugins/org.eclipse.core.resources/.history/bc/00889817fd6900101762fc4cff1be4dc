package com.homedecor.services.impl;

import com.homedecor.HomeDecorApplication;
import com.homedecor.entity.Role;
import com.homedecor.entity.User;
import com.homedecor.repository.RoleRepository;
import com.homedecor.repository.UserRepository;
import com.homedecor.services.UserServices;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class UserServicesImpl implements UserServices {

    private final HomeDecorApplication homeDecorApplication;

    private final UserRepository userRepository;
    private final RoleRepository roleRepository;

    @Autowired
    public UserServicesImpl(UserRepository userRepository, RoleRepository roleRepository, HomeDecorApplication homeDecorApplication) {
        this.userRepository = userRepository;
        this.roleRepository = roleRepository;
        this.homeDecorApplication = homeDecorApplication;
    }

    @Override
    public User createUser(User user) {
        if (userRepository.existsByEmail(user.getEmail())) {
            throw new RuntimeException("Email is already registered");
        }
       

        if (user.getRole() != null && user.getRole().getRoleId() != null) {
            Role role = roleRepository.findById(user.getRole().getRoleId())
                    .orElseThrow(() -> new RuntimeException("Role not found"));
            user.setRole(role);
        }

        return userRepository.save(user);
    }

    @Override
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    @Override
    public Optional<User> getUserById(Integer userId) {
        return userRepository.findById(userId);
    }

    @Override
    public User updateUser(Integer userId, User userDetails) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));
        user.setEmail(userDetails.getEmail());

        if (userDetails.getPassword() != null && !userDetails.getPassword().isEmpty()) {
            // Plain password update (INSECURE)
            user.setPassword(userDetails.getPassword());
        }

        if (userDetails.getRole() != null && userDetails.getRole().getRoleId() != null) {
            Role role = roleRepository.findById(userDetails.getRole().getRoleId())
                    .orElseThrow(() -> new RuntimeException("Role not found"));
            user.setRole(role);
        } else {
            user.setRole(null);
        }

        return userRepository.save(user);
    }

    @Override
    public void deleteUser(Integer userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));
        userRepository.delete(user);
    }

    @Override
    public Optional<User> getUserByEmail(String email) {
       Optional<User> byEmail = userRepository.findByEmail(email);
     
       return byEmail;
    }
}
