package com.homedecor.services;

import com.homedecor.entity.User;
import com.homedecor.repository.UserRepository;
import com.homedecor.entity.Role;
//import com.homedecor.repository.RoleRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class UserServices {

    @Autowired
    private UserRepository userRepository;
    
    @Autowired
//    private RoleRepository roleRepository;

    // Create a new User
    public User createUser(User user) {
        // You may add validation here if needed
        return userRepository.save(user);
    }

    // Get all Users
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    // Get User by ID
    public Optional<User> getUserById(Integer userId) {
        return userRepository.findById(userId);
    }

    // Update User
    public User updateUser(Integer userId, User userDetails) {
        User user = userRepository.findById(userId)
                       .orElseThrow(() -> new RuntimeException("User not found with id " + userId));

        user.setEmail(userDetails.getEmail());
        user.setPassword(userDetails.getPassword());

        // Update Role: find role by id or throw exception
//        if(userDetails.getRole() != null && userDetails.getRole().getRoleId() != null) {
//            Role role = roleRepository.findById(userDetails.getRole().getRoleId())
//                          .orElseThrow(() -> new RuntimeException("Role not found"));
//            user.setRole(role);
//        } else {
//            user.setRole(null);  
//        }

        return userRepository.save(user);
    }

    // Delete User by ID
    public void deleteUser(Integer userId) {
        User user = userRepository.findById(userId)
                       .orElseThrow(() -> new RuntimeException("User not found with id " + userId));
        userRepository.delete(user);
    }
}

