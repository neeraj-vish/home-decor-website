package com.homedecor.controllers;

import com.homedecor.entity.Buyer;
import com.homedecor.services.BuyerService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/buyers")
@CrossOrigin(origins = "http://localhost:5173") 
public class BuyerController {

    private final BuyerService buyerService;

    @Autowired
    public BuyerController(BuyerService buyerService) {
        this.buyerService = buyerService;
    }

    // Create a new Buyer (Signup)
    @PostMapping
    public ResponseEntity<?> createBuyer(@RequestBody Buyer buyer) {
        try {
            Buyer savedBuyer = buyerService.saveBuyer(buyer);
            return ResponseEntity.ok(savedBuyer);
        } catch (RuntimeException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

    // Get Buyer by ID
    @GetMapping("/{id}")
    public ResponseEntity<Buyer> getBuyerById(@PathVariable Integer id) {
        return buyerService.getBuyerById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    // Get all Buyers
    @GetMapping
    public ResponseEntity<List<Buyer>> getAllBuyers() {
        return ResponseEntity.ok(buyerService.getAllBuyers());
    }

    // Update Buyer by ID
    @PutMapping("/{id}")
    public ResponseEntity<?> updateBuyer(@PathVariable Integer id, @RequestBody Buyer buyer) {
        try {
            Buyer updatedBuyer = buyerService.updateBuyer(id, buyer);
            return ResponseEntity.ok(updatedBuyer);
        } catch (RuntimeException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

    // Delete Buyer by ID
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteBuyer(@PathVariable Integer id) {
        try {
            buyerService.deleteBuyer(id);
            return ResponseEntity.noContent().build();
        } catch (RuntimeException e) {
            return ResponseEntity.notFound().build();
        }
    }
}
