package com.homedecor.controllers;

import com.homedecor.entity.User;
import com.homedecor.services.UserServices;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = "http://localhost:5173")  
public class AuthController {

    private final UserServices userService;
    private final BCryptPasswordEncoder passwordEncoder;

    @Autowired
    public AuthController(UserServices userService, BCryptPasswordEncoder passwordEncoder) {
        this.userService = userService;
        this.passwordEncoder = passwordEncoder;
    }

    public static class LoginRequest {
        private String email;
        private String password;
        public String getEmail() { return email; }
        public void setEmail(String email) { this.email = email; }
        public String getPassword() { return password; }
        public void setPassword(String password) { this.password = password; }
    }

    public static class LoginResponse {
        private String email;
        private String roleName;
        public LoginResponse(String email, String roleName) {
            this.email = email;
            this.roleName = roleName;
        }
        public String getEmail() { return email; }
        public String getRoleName() { return roleName; }
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginRequest loginRequest) {
        Optional<User> optionalUser = userService.getUserByEmail(loginRequest.getEmail());

        if (optionalUser.isEmpty()) {
            return ResponseEntity.status(401).body("User not found");
        }

        User user = optionalUser.get();

        // Correct password check using BCrypt
        if (!passwordEncoder.matches(loginRequest.getPassword(), user.getPassword())) {
            return ResponseEntity.status(401).body("Invalid password");
        }

        String roleName = (user.getRole() != null) ? user.getRole().getRoleName() : "Unknown";

        return ResponseEntity.ok(new LoginResponse(user.getEmail(), roleName));
    }
}
